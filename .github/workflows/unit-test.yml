name: Unit Test
on: [push, pull_request]
permissions:
  contents: read
jobs:
  python-unittest:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.9, '3.10', '3.11', '3.12', '3.13']
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@6c439dc8bdf85cadbbce9ed30d1c7b959517bc49 # v2.12.2
        with:
          egress-policy: audit
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Setup python ${{ matrix.python-version }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          python -m pip install ".[dev]"
      - name: Playwright install
        run: playwright install
      - name: Run unittest
        id: pytest
        shell: python
        run: |
          import os
          import subprocess
          import sys

          result = subprocess.run(['pytest'], capture_output=True, text=True)
          output = result.stdout
          print(output)
          if result.returncode > 0:
            files = [line.strip() for line in output.splitlines() if "obtained" in line and os.path.exists(line.strip())]
            if files:
              print("Faulty files:", files)
              with open(os.getenv("GITHUB_OUTPUT"), "a") as fd:
                fd.write("imgs=" + "\n".join(files))

          sys.exit(result.returncode)
      - name: Upload failed image artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failed-images-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            ${{ steps.pytest.outputs.imgs }}
